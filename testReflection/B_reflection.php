<?php

//autogenerated
class B_reflection implements \Sigmalab\SimpleReflection\ICanReflection
{
	/** B */
	private B $instance;
	
	public function __construct(B $instance) 
	{
		$this->instance = $instance;
	}	
	/**
	 * @kphp-required
	 * @param string $name
	 * @return \Sigmalab\SimpleReflection\TypeName
	 */
	public function getPropertyType(string $name) : \Sigmalab\SimpleReflection\TypeName
	{
		//autogenerated map
		switch ($name) {
			case 'other': return \Sigmalab\SimpleReflection\TypeName::$stringValue;
		}             
		return \Sigmalab\SimpleReflection\TypeName::$intValue;
	}
	

	/**
	 * @kphp-required
	 * @param string $name
	 * @param \Sigmalab\SimpleReflection\ValueMixed $value
	 */
	public function setPropertyValue(string $name, \Sigmalab\SimpleReflection\ValueMixed $value) : void
	{
		//autogenerated map
		switch ($name) {
/* string */
		case 'other':
			if ($value instanceof \Sigmalab\SimpleReflection\ValueScalar) {
				$this->instance->other = $value->get_as_string();
			}

			break;
		}
	}

	/**
	 * @kphp-required
	 * @param string $name
	 * @return \Sigmalab\SimpleReflection\ValueMixed
	 */
	public function getPropertyValue(string $name) :\Sigmalab\SimpleReflection\ValueMixed
	{
		//autogenerated map
		switch ($name) {
			case 'other': return new \Sigmalab\SimpleReflection\ValueScalar( $this->instance->other );
		}
		return null;
	}
	
	public static function registerClass()
	{   
		\Sigmalab\SimpleReflection\ClassRegistry::registerClass('B', function(){ return new B; });
		\Sigmalab\SimpleReflection\ClassRegistry::registerReflection('B_reflection', function(object $instance){ 
			return new B_reflection(instance_cast($instance, B::class)); 
		});
		
	}
	
	/**
	 * @param string $methodName
	 * @param \Sigmalab\SimpleReflection\ValueMixed[] $args
	 */
	public function callMethod(string $methodName, array $args) :void
	{
		switch ($methodName)
		{
			case 'methodA':
				$this->invoke_methodA($args);
				break;
			case 'set_other':
				$this->invoke_set_other($args);
				break;
		}
	}
	/**
	 * @param \Sigmalab\SimpleReflection\ValueMixed[] $args
	 */
	private function invoke_methodA(array $args)
	{

		$value0 = $args[0];
		if ( $value0 instanceof \Sigmalab\SimpleReflection\ValueScalar) {
			$arg0 = $value0->get_as_string();
		}
		else {
			throw new Exception("Invalid argument 0");
		}

		$value1 = $args[1];
		if ( $value1 instanceof \Sigmalab\SimpleReflection\ValueScalar) {
			$arg1 = $value1->get_as_int();
		}
		else {
			throw new Exception("Invalid argument 1");
		}

		$value2 = $args[2];
		if ( $value2 instanceof \Sigmalab\SimpleReflection\ValueScalars) {
			$arg2 = $value2->get_as_int();
		}
		else {
			throw new Exception("Invalid argument 2");
		}

		$value3 = $args[3];
		if ( $value3 instanceof \Sigmalab\SimpleReflection\ValueObjects) {
			$arg3 = $value3->get_as_array();
		}
		else {
			throw new Exception("Invalid argument 3");
		}

		$value4 = $args[4];
		if ( $value4 instanceof \Sigmalab\SimpleReflection\ValueObject) {
			$arg4 = instance_cast($value4, B::class);
		}
		else {
			throw new Exception("Invalid argument 4");
		}
		$this->instance->methodA($arg0,$arg1,$arg2,$arg3,$arg4);	}
	/**
	 * @param \Sigmalab\SimpleReflection\ValueMixed[] $args
	 */
	private function invoke_set_other(array $args)
	{

		$value0 = $args[0];
		if ( $value0 instanceof \Sigmalab\SimpleReflection\ValueScalar) {
			$arg0 = $value0->get_as_string();
		}
		else {
			throw new Exception("Invalid argument 0");
		}
		$this->instance->set_other($arg0);	}
	/**
	 * @param string $name
	 * @param string $value
	 * @throws Exception
	 */
	public function set_as_string(string  $name, string $value):void
	{
		switch ($name) {
			case 'other': $this->instance->other  = $value; break;
			default: throw new Exception("invalid argument: $name");
		}
	}
	/**
	 * @param string $name
	 * @return string
	 * @throws Exception
	 */
	public function get_as_string(string  $name):string
	{
		switch ($name) {
			case 'other': return $this->instance->other;
			default: throw new Exception("invalid argument: $name");
		}
	}
	/**
	 * @param string $name
	 * @param int $value
	 * @throws Exception
	 */
	public function set_as_int(string  $name, int $value):void
	{
		switch ($name) {
			default: throw new Exception("invalid argument: $name");
		}
	}
	/**
	 * @param string $name
	 * @return int
	 * @throws Exception
	 */
	public function get_as_int(string  $name):int
	{
		return 0;
	}
	/**
	 * @param string $name
	 * @param float $value
	 * @throws Exception
	 */
	public function set_as_float(string  $name, float $value):void
	{
		switch ($name) {
			default: throw new Exception("invalid argument: $name");
		}
	}
	/**
	 * @param string $name
	 * @return float
	 * @throws Exception
	 */
	public function get_as_float(string  $name):float
	{
		switch ($name) {
			default: throw new Exception("invalid argument: $name");
		}
	}
	/**
	 * @param string $name
	 * @param bool $value
	 * @throws Exception
	 */
	public function set_as_bool(string  $name, bool $value):void
	{
		switch ($name) {
			default: throw new Exception("invalid argument: $name");
		}
	}
	/**
	 * @param string $name
	 * @return bool
	 * @throws Exception
	 */
	public function get_as_bool(string  $name):bool
	{
		switch ($name) {
			default: throw new Exception("invalid argument: $name");
		}
	}
	/**
	 * @param string $name
	 * @throws Exception
	 */
	public function set_as_null(string  $name):void
	{
		switch ($name) {
			default: throw new Exception("invalid argument: $name");
		}
	}
	/**
	 * @param string $name
	 * @param mixed $value
	 * @throws Exception
	 */
	public function set_as_mixed(string $name, $value):void
	{
		switch ($name) {
			case 'other': $this->instance->other  = (string)$value; break;
			default: throw new Exception("invalid argument: $name");
		}
	}
	/**
	 * @param string $name
	 * @return mixed
	 * @throws Exception
	 */
	public function get_as_mixed(string $name)
	{
		switch ($name) {
			case 'other': return $this->instance->other; break;
			default: throw new Exception("invalid argument: $name");
		}
	}
	/**
	 * @param string $name
	 * @param \Sigmalab\SimpleReflection\IReflectedObject $value
	 * @throws Exception
	 */
	public function set_as_object(string $name, \Sigmalab\SimpleReflection\IReflectedObject $value):void
	{
		switch ($name) {
			default: throw new Exception("invalid argument: $name");
		}
	}

	/**
	 * @param string $name
	 * @return \Sigmalab\SimpleReflection\IReflectedObject 
	 * @throws Exception
	 */
	public function get_as_object(string $name):?\Sigmalab\SimpleReflection\IReflectedObject 
	{
return null; /* exception will be prefer , but bug. */
	}

	/**
	 * @param string $name
	 * @param \Sigmalab\SimpleReflection\IReflectedObject[] $value
	 * @throws Exception
	 */
	public function set_as_objects(string $name, array $value):void
	{
		switch ($name) {
			default: throw new Exception("invalid argument: $name");
		}
	}

	/**
	 * @param string $name
	 * @return \Sigmalab\SimpleReflection\IReflectedObject[] 
	 * @throws Exception
	 */
	public function get_as_objects(string $name):array
	{
return []; /* exception will be prefer , but bug. */
	}
}
