<?php

//autogenerated
class A_reflection implements \Sigmalab\SimpleReflection\ICanReflection
{
	/** A */
	private A $instance;
	
	public function __construct(A $instance) 
	{
		$this->instance = $instance;
	}	
	/**
	 * @kphp-required
	 * @param string $name
	 * @return \Sigmalab\SimpleReflection\TypeName
	 */
	public function getPropertyType(string $name) : \Sigmalab\SimpleReflection\TypeName
	{
		//autogenerated map
		switch ($name) {
			case 'name': return \Sigmalab\SimpleReflection\TypeName::$stringValue;
			case 'value': return \Sigmalab\SimpleReflection\TypeName::$intValue;
			case 'nullableInt': return \Sigmalab\SimpleReflection\TypeName::$intValue;
			case 'floatValue': return \Sigmalab\SimpleReflection\TypeName::$floatValue;
			case 'boolValue': return \Sigmalab\SimpleReflection\TypeName::$boolValue;
			case 'myarray': return \Sigmalab\SimpleReflection\TypeName::$intArray;
			case 'stringArray': return \Sigmalab\SimpleReflection\TypeName::$stringArray;
			case 'floatArray': return \Sigmalab\SimpleReflection\TypeName::$floatArray;
			case 'boolArray': return \Sigmalab\SimpleReflection\TypeName::$boolArray;
			case 'arrayB': return self::$arrayB_type;
			case 'valueB': return self::$valueB_type;
			case 'valueA': return self::$valueA_type;
		}             
		return \Sigmalab\SimpleReflection\TypeName::$intValue;
	}
	

	/**
	 * @kphp-required
	 * @param string $name
	 * @param \Sigmalab\SimpleReflection\ValueMixed $value
	 */
	public function setPropertyValue(string $name, \Sigmalab\SimpleReflection\ValueMixed $value) : void
	{
		//autogenerated map
		switch ($name) {
/* string */
		case 'name':
			if ($value instanceof \Sigmalab\SimpleReflection\ValueScalar) {
				$this->instance->name = $value->get_as_string();
			}

			break;
/* int */
		case 'value':
			if ($value instanceof \Sigmalab\SimpleReflection\ValueScalar) {
				$this->instance->value = $value->get_as_int();
			}

			break;
/* int */
		case 'nullableInt':
			if ($value instanceof \Sigmalab\SimpleReflection\ValueScalar) {
				$this->instance->nullableInt = $value->get_as_int();
			}

			break;
/* float */
		case 'floatValue':
			if ($value instanceof \Sigmalab\SimpleReflection\ValueScalar) {
				$this->instance->floatValue = $value->get_as_float();
			}

			break;
/* bool */
		case 'boolValue':
			if ($value instanceof \Sigmalab\SimpleReflection\ValueScalar) {
				$this->instance->boolValue = $value->get_as_bool();
			}

			break;
/* int */
		case 'myarray':
				if ($value instanceof \Sigmalab\SimpleReflection\ValueScalars) {
					$this->instance->myarray  = $value->get_as_int();
				}
			break;
/* string */
		case 'stringArray':
				if ($value instanceof \Sigmalab\SimpleReflection\ValueScalars) {
					$this->instance->stringArray  = $value->get_as_string();
				}
			break;
/* float */
		case 'floatArray':
				if ($value instanceof \Sigmalab\SimpleReflection\ValueScalars) {
					$this->instance->floatArray  = $value->get_as_float();
				}
			break;
/* bool */
		case 'boolArray':
				if ($value instanceof \Sigmalab\SimpleReflection\ValueScalars) {
					$this->instance->boolArray  = $value->get_as_bool();
				}
			break;
/* B */
		case 'arrayB':
				$this->instance->arrayB = [];
				if ($value instanceof \Sigmalab\SimpleReflection\ValueObjects) {
					foreach ($value->getValue() as $arrayValue) {
						$this->instance->arrayB[] =  instance_cast($arrayValue, B::class);
					}
				}
			break;
/* B */
		case 'valueB':
			if ( $value instanceof \Sigmalab\SimpleReflection\ValueObject ) {
				$this->instance->valueB = instance_cast($value->getValue(), B::class); 
			}
			break;
/* A */
		case 'valueA':
			if ( $value instanceof \Sigmalab\SimpleReflection\ValueObject ) {
				$this->instance->valueA = instance_cast($value->getValue(), A::class); 
			}
			break;
		}
	}

	/**
	 * @kphp-required
	 * @param string $name
	 * @return \Sigmalab\SimpleReflection\ValueMixed
	 */
	public function getPropertyValue(string $name) :\Sigmalab\SimpleReflection\ValueMixed
	{
		//autogenerated map
		switch ($name) {
			case 'name': return new \Sigmalab\SimpleReflection\ValueScalar( $this->instance->name );
			case 'value': return new \Sigmalab\SimpleReflection\ValueScalar( $this->instance->value );
			case 'nullableInt': return new \Sigmalab\SimpleReflection\ValueScalar( $this->instance->nullableInt );
			case 'floatValue': return new \Sigmalab\SimpleReflection\ValueScalar( $this->instance->floatValue );
			case 'boolValue': return new \Sigmalab\SimpleReflection\ValueScalar( $this->instance->boolValue );
			case 'myarray': return new \Sigmalab\SimpleReflection\ValueScalars( $this->instance->myarray );
			case 'stringArray': return new \Sigmalab\SimpleReflection\ValueScalars( $this->instance->stringArray );
			case 'floatArray': return new \Sigmalab\SimpleReflection\ValueScalars( $this->instance->floatArray );
			case 'boolArray': return new \Sigmalab\SimpleReflection\ValueScalars( $this->instance->boolArray );
			case 'arrayB': return new \Sigmalab\SimpleReflection\ValueObjects( $this->instance->arrayB );
			case 'valueB': return new \Sigmalab\SimpleReflection\ValueObject( $this->instance->valueB );
			case 'valueA': return new \Sigmalab\SimpleReflection\ValueObject( $this->instance->valueA );
		}
		return null;
	}
	
	public static function registerClass()
	{   
		\Sigmalab\SimpleReflection\ClassRegistry::registerClass('A', function(){ return new A; });
		\Sigmalab\SimpleReflection\ClassRegistry::registerReflection('A_reflection', function(object $instance){ 
			return new A_reflection(instance_cast($instance, A::class)); 
		});
		self::$arrayB_type = new \Sigmalab\SimpleReflection\TypeName('B', \Sigmalab\SimpleReflection\TypeName::Array );
		self::$valueB_type = new \Sigmalab\SimpleReflection\TypeName('B', \Sigmalab\SimpleReflection\TypeName::Object );
		self::$valueA_type = new \Sigmalab\SimpleReflection\TypeName('A', \Sigmalab\SimpleReflection\TypeName::Object );
	}
	private static \Sigmalab\SimpleReflection\TypeName $arrayB_type;
	private static \Sigmalab\SimpleReflection\TypeName $valueB_type;
	private static \Sigmalab\SimpleReflection\TypeName $valueA_type;
	/**
	 * @param string $methodName
	 * @param \Sigmalab\SimpleReflection\ValueMixed[] $args
	 */
	public function callMethod(string $methodName, array $args) :void
	{
		switch ($methodName)
		{
		}
	}
	/**
	 * @param string $name
	 * @param string $value
	 * @throws Exception
	 */
	public function set_as_string(string  $name, string $value):void
	{
		switch ($name) {
			case 'name': $this->instance->name  = $value; break;
			default: throw new Exception("invalid argument: $name");
		}
	}
	/**
	 * @param string $name
	 * @return string
	 * @throws Exception
	 */
	public function get_as_string(string  $name):string
	{
		switch ($name) {
			case 'name': return $this->instance->name;
			default: throw new Exception("invalid argument: $name");
		}
	}
	/**
	 * @param string $name
	 * @param int $value
	 * @throws Exception
	 */
	public function set_as_int(string  $name, int $value):void
	{
		switch ($name) {
			case 'value': $this->instance->value  = $value; break;
			default: throw new Exception("invalid argument: $name");
		}
	}
	/**
	 * @param string $name
	 * @return int
	 * @throws Exception
	 */
	public function get_as_int(string  $name):int
	{
		switch ($name) {
			case 'value': return $this->instance->value;
			default: throw new Exception("invalid argument: $name");
		}
	}
	/**
	 * @param string $name
	 * @param float $value
	 * @throws Exception
	 */
	public function set_as_float(string  $name, float $value):void
	{
		switch ($name) {
			case 'floatValue': $this->instance->floatValue  = $value; break;
			default: throw new Exception("invalid argument: $name");
		}
	}
	/**
	 * @param string $name
	 * @return float
	 * @throws Exception
	 */
	public function get_as_float(string  $name):float
	{
		switch ($name) {
			case 'floatValue': return $this->instance->floatValue;
			default: throw new Exception("invalid argument: $name");
		}
	}
	/**
	 * @param string $name
	 * @param bool $value
	 * @throws Exception
	 */
	public function set_as_bool(string  $name, bool $value):void
	{
		switch ($name) {
			case 'boolValue': $this->instance->boolValue  = $value; break;
			default: throw new Exception("invalid argument: $name");
		}
	}
	/**
	 * @param string $name
	 * @return bool
	 * @throws Exception
	 */
	public function get_as_bool(string  $name):bool
	{
		switch ($name) {
			default: throw new Exception("invalid argument: $name");
		}
	}
	/**
	 * @param string $name
	 * @throws Exception
	 */
	public function set_as_null(string  $name):void
	{
		switch ($name) {
			case 'nullableInt': $this->instance->nullableInt  = null; break;
			case 'valueA': $this->instance->valueA  = null; break;
			default: throw new Exception("invalid argument: $name");
		}
	}
	/**
	 * @param string $name
	 * @param mixed $value
	 * @throws Exception
	 */
	public function set_as_mixed(string $name, $value):void
	{
		switch ($name) {
			case 'name': $this->instance->name  = (string)$value; break;
			case 'value': $this->instance->value  = (int)$value; break;
			case 'nullableInt': $this->instance->nullableInt  = (int)$value; break;
			case 'floatValue': $this->instance->floatValue  = (float)$value; break;
			case 'boolValue': $this->instance->boolValue  = (bool)$value; break;
			case 'myarray': $this->instance->myarray  = [];
				foreach( $value as $arrayKey=>$item ) {
					$this->instance->myarray[$arrayKey] = (int)$item;
				}
				break;
			case 'stringArray': $this->instance->stringArray  = [];
				foreach( $value as $arrayKey=>$item ) {
					$this->instance->stringArray[$arrayKey] = (string)$item;
				}
				break;
			case 'floatArray': $this->instance->floatArray  = [];
				foreach( $value as $arrayKey=>$item ) {
					$this->instance->floatArray[$arrayKey] = (float)$item;
				}
				break;
			case 'boolArray': $this->instance->boolArray  = [];
				foreach( $value as $arrayKey=>$item ) {
					$this->instance->boolArray[$arrayKey] = (bool)$item;
				}
				break;
			default: throw new Exception("invalid argument: $name");
		}
	}
	/**
	 * @param string $name
	 * @return mixed
	 * @throws Exception
	 */
	public function get_as_mixed(string $name)
	{
		switch ($name) {
			case 'name': return $this->instance->name; break;
			case 'value': return $this->instance->value; break;
			case 'nullableInt': return $this->instance->nullableInt; break;
			case 'floatValue': return $this->instance->floatValue; break;
			case 'boolValue': return $this->instance->boolValue; break;
			case 'myarray': return $this->instance->myarray;
				break;
			case 'stringArray': return $this->instance->stringArray;
				break;
			case 'floatArray': return $this->instance->floatArray;
				break;
			case 'boolArray': return $this->instance->boolArray;
				break;
			default: throw new Exception("invalid argument: $name");
		}
	}
	/**
	 * @param string $name
	 * @param \Sigmalab\SimpleReflection\IReflectedObject $value
	 * @throws Exception
	 */
	public function set_as_object(string $name, \Sigmalab\SimpleReflection\IReflectedObject $value):void
	{
		switch ($name) {
			case 'valueB': $this->instance->valueB = instance_cast($value, B::class); break;
			case 'valueA': $this->instance->valueA = instance_cast($value, A::class); break;
			default: throw new Exception("invalid argument: $name");
		}
	}

	/**
	 * @param string $name
	 * @return \Sigmalab\SimpleReflection\IReflectedObject 
	 * @throws Exception
	 */
	public function get_as_object(string $name):?\Sigmalab\SimpleReflection\IReflectedObject 
	{
		switch ($name) {
			case 'valueB': return $this->instance->valueB;
			case 'valueA': return $this->instance->valueA;
			default: throw new Exception("invalid argument: $name");
		}
	}

	/**
	 * @param string $name
	 * @param \Sigmalab\SimpleReflection\IReflectedObject[] $value
	 * @throws Exception
	 */
	public function set_as_objects(string $name, array $value):void
	{
		switch ($name) {
			case 'arrayB': 
				$this->instance->arrayB  = [];
				foreach( $value as $arrayKey=>$item ) {
					$this->instance->arrayB[$arrayKey] = instance_cast($item, B::class); ;
				}
				break;
			default: throw new Exception("invalid argument: $name");
		}
	}

	/**
	 * @param string $name
	 * @return \Sigmalab\SimpleReflection\IReflectedObject[] 
	 * @throws Exception
	 */
	public function get_as_objects(string $name):array
	{
return []; /* exception will be prefer , but bug. */
	}
}
