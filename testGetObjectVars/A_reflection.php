<?php

//autogenerated
class A_reflection implements \SimpleReflection\ICanReflection
{
	/** A */
	private A $instance;
	
	public function __construct(A $instance) 
	{
		$this->instance = $instance;
	}
	/**
	 * @kphp-required
	 * @param string $name
	 * @return \SimpleReflection\TypeName
	 */
	public function getPropertyType(string $name) : \SimpleReflection\TypeName
	{
		//autogenerated map
		switch ($name) {
			case 'name': return \SimpleReflection\TypeName::$stringValue;
			case 'value': return \SimpleReflection\TypeName::$intValue;
			case 'myarray': return \SimpleReflection\TypeName::$intArray;
			case 'stringArray': return \SimpleReflection\TypeName::$stringArray;
			case 'floatArray': return \SimpleReflection\TypeName::$floatArray;
			case 'boolArray': return \SimpleReflection\TypeName::$boolArray;
			case 'arrayB': return self::$arrayB_type;
			case 'valueB': return self::$valueB_type;
		}             
		return \SimpleReflection\TypeName::$intValue;
	}
	

	/**
	 * @kphp-required
	 * @param string $name
	 * @param \SimpleReflection\MixedValue $value
	 */
	public function setPropertyValue(string $name, \SimpleReflection\MixedValue $value) : void
	{
		//autogenerated map
		switch ($name) {
		case 'name':
			if ($value instanceof \SimpleReflection\ScalarValue) {
				$this->instance->name = (string)$value->getValue();
			}

			break;
		case 'value':
			if ($value instanceof \SimpleReflection\ScalarValue) {
				$this->instance->value = (int)$value->getValue();
			}

			break;
		case 'myarray':
				$this->instance->myarray = [];
				if ($value instanceof \SimpleReflection\ScalarArrayValue) {
					foreach ($value->getValue() as $arrayValue) {
						$this->instance->myarray[] =  (int) $arrayValue;
					}
				}
			break;
		case 'stringArray':
				$this->instance->stringArray = [];
				if ($value instanceof \SimpleReflection\ScalarArrayValue) {
					foreach ($value->getValue() as $arrayValue) {
						$this->instance->stringArray[] =  (string) $arrayValue;
					}
				}
			break;
		case 'floatArray':
				$this->instance->floatArray = [];
				if ($value instanceof \SimpleReflection\ScalarArrayValue) {
					foreach ($value->getValue() as $arrayValue) {
						$this->instance->floatArray[] =  (float) $arrayValue;
					}
				}
			break;
		case 'boolArray':
				$this->instance->boolArray = [];
				if ($value instanceof \SimpleReflection\ScalarArrayValue) {
					foreach ($value->getValue() as $arrayValue) {
						$this->instance->boolArray[] =  (bool) $arrayValue;
					}
				}
			break;
		case 'arrayB':
				$this->instance->arrayB = [];
				if ($value instanceof \SimpleReflection\ArrayValue) {
					foreach ($value->getValue() as $arrayValue) {
						$this->instance->arrayB[] =  instance_cast($arrayValue, B::class);
					}
				}
			break;
		case 'valueB':
			if ( $value instanceof \SimpleReflection\ObjectValue ) {
				$this->instance->valueB = instance_cast($value->getValue(), B::class); 
			}
			break;
		}
	}

	/**
	 * @kphp-required
	 * @param string $name
	 * @return \SimpleReflection\MixedValue 
	 */
	public function getPropertyValue(string $name) :\SimpleReflection\MixedValue
	{
		//autogenerated map
		switch ($name) {
			case 'name': return new \SimpleReflection\ScalarValue( $this->instance->name )  /*string*/;
			case 'value': return new \SimpleReflection\ScalarValue( $this->instance->value )  /*int*/;
			case 'myarray': return new \SimpleReflection\ScalarArrayValue( $this->instance->myarray )  /*int*/;
			case 'stringArray': return new \SimpleReflection\ScalarArrayValue( $this->instance->stringArray )  /*string*/;
			case 'floatArray': return new \SimpleReflection\ScalarArrayValue( $this->instance->floatArray )  /*float*/;
			case 'boolArray': return new \SimpleReflection\ScalarArrayValue( $this->instance->boolArray )  /*bool*/;
			case 'arrayB': return new \SimpleReflection\ArrayValue( $this->instance->arrayB )  /*B*/;
			case 'valueB': return new \SimpleReflection\ObjectValue( $this->instance->valueB )  /*B*/;
		}
		return null;
	}
	
	public static function registerClass()
	{   
		\SimpleReflection\ClassRegistry::registerClass('A', function(){ return new A; });
		\SimpleReflection\ClassRegistry::registerReflection('A_reflection', function(object $instance){ 
			return new A_reflection(instance_cast($instance, A::class)); 
		});
		self::$arrayB_type = new \SimpleReflection\TypeName('B', \SimpleReflection\TypeName::Array );
		self::$valueB_type = new \SimpleReflection\TypeName('B', \SimpleReflection\TypeName::Object );
	}
	private static \SimpleReflection\TypeName $arrayB_type;
	private static \SimpleReflection\TypeName $valueB_type;
}
