<?php


//autogenerated
use SimpleReflection\ArrayValue;
use SimpleReflection\ClassRegistry;
use SimpleReflection\MixedValue;
use SimpleReflection\ObjectValue;
use SimpleReflection\ScalarArrayValue;
use SimpleReflection\ScalarValue;
use SimpleReflection\TypeName;

trait A_reflection
{
	public static function registerClass()
	{
		ClassRegistry::registerClass('A', function () {
			return new A;
		});
	}

	/**
	 * @kphp-required
	 * @param string $name
	 * @return TypeName
	 */
	public function getPropertyType(string $name): TypeName
	{
		//autogenerated map
		switch ($name) {
			case 'name':
				return new TypeName('string', TypeName::String);
			case 'value':
				return new TypeName('int', TypeName::Int);
			case 'myarray':
				return new TypeName('int', TypeName::Array);
			case 'arrayB':
				return new TypeName('B', TypeName::Array);
			case 'valueB':
				return new TypeName('B', TypeName::Object);
		}
		return new TypeName('int', TypeName::Int);
	}


	/**
	 * @kphp-required
	 * @param string $name
	 * @param MixedValue $value
	 */
	public function setPropertyValue(string $name, MixedValue $value): void
	{
		//autogenerated map
		switch ($name) {
			case 'name':
				if ($value instanceof ScalarValue) {
					$this->name = (string)$value->getValue();
				}
				break;
			case 'value':
				if ($value instanceof ScalarValue) {
					$this->value = (int)$value->getValue();
				}
				break;
			case 'myarray':
				$this->myarray = [];
				if ($value instanceof ScalarArrayValue) {
					foreach ($value->getValue() as $arrayValue) {
						$this->myarray[] =  (int)$arrayValue;
					}
				}
				break;


			case 'arrayB':
				$this->arrayB = [];
				if ($value instanceof ArrayValue) {
					foreach ($value->getValue() as $arrayValue) {
						$this->arrayB[] =  instance_cast($arrayValue, B::class);
					}
				}
				break;

			case 'valueB':
				if ($value instanceof ObjectValue) {
					$this->valueB = instance_cast($value->getValue(), B::class);
				}
				break;
		}
	}

	/**
	 * @kphp-required
	 * @param string $name
	 * @return  MixedValue
	 */
	public function getPropertyValue(string $name): MixedValue
	{
		//autogenerated map
		switch ($name) {
			case 'name':
				return new ScalarValue($this->name);             //name is string
			case 'value':
				return new ScalarValue($this->value);           //name is int
			case 'myarray': return new ScalarArrayValue($this->myarray);       //myarray is int[]
			case 'arrayB': return new ArrayValue($this->arrayB);  // arrayB is B[]
			case 'valueB':
				return new ObjectValue($this->valueB);         // valueB is B
		}
		return null;
	}
}
